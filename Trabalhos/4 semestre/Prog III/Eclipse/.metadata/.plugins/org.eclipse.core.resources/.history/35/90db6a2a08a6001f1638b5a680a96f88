package service;

import java.util.List;

import entity.Vehicle;
import repository.VehiclesRepository;

public class VehicleService {

	private final VehiclesRepository vehiclesRepository;
	
	public VehicleService() {
	    this.vehiclesRepository = new VehiclesRepository();
	}
	
	public boolean createVehicle(String marca, String modelo, int ano) {
	    if (marca == null || marca.isEmpty()) {
	        throw new IllegalArgumentException("A marca não pode ser nula ou vazia.");
	    }

	    if (modelo == null || modelo.isEmpty()) {
	        throw new IllegalArgumentException("O modelo não pode ser nula ou vazia.");
	    }

	    int currentYear = java.time.Year.now().getValue();
	    if (ano <= 1885 || ano > currentYear) {
	        throw new IllegalArgumentException("O ano deve ser maior que 1885 e não pode ser maior que o ano atual.");
	    }
	    return vehiclesRepository.createVehicle(marca, modelo, ano);
	}
	
    public List<Vehicle> getAllVehicles() {
        return vehiclesRepository.getAllVehicles();
    }

    public List<Vehicle> getVehiclesByMake(String marca) {
        if (marca == null || marca.isEmpty()) {
            throw new IllegalArgumentException("A marca não pode ser nula ou vazia.");
        }
        return vehiclesRepository.getVehiclesByMake(marca);
    }

    public List<Vehicle> getVehiclesByModel(String modelo) {
        if (modelo == null || modelo.isEmpty()) {
            throw new IllegalArgumentException("O modelo não pode ser nulo ou vazio.");
        }
        return vehiclesRepository.getVehiclesByModel(modelo);
    }

    public List<Vehicle> getVehiclesByYear(int ano) {
        int currentYear = java.time.Year.now().getValue();
        if (ano <= 1885 || ano > currentYear) {
            throw new IllegalArgumentException("O ano deve ser maior que 1885 e não pode ser maior que o ano atual.");
        }
        return vehiclesRepository.getVehiclesByYear(ano);
    }

    public boolean updateVehicle(int id, String marca, String modelo, int ano) {
        if (id <= 0) {
            throw new IllegalArgumentException("O ID do veículo deve ser um valor positivo.");
        }
        if (marca == null || marca.isEmpty()) {
            throw new IllegalArgumentException("A marca não pode ser nula ou vazia.");
        }
        if (modelo == null || modelo.isEmpty()) {
            throw new IllegalArgumentException("O modelo não pode ser nulo ou vazio.");
        }
        int currentYear = java.time.Year.now().getValue();
        if (ano <= 1885 || ano > currentYear) {
            throw new IllegalArgumentException("O ano deve ser maior que 1885 e não pode ser maior que o ano atual.");
        }
        return vehiclesRepository.updateVehicle(id, marca, modelo, ano);
    }
    
    public Vehicle getVehiclesById(int id) {
        if (id <= 0) {
            throw new IllegalArgumentException("O ID do veículo deve ser um valor positivo.");
        }
        return vehiclesRepository.getVehiclesById(id);
    }

    public boolean deleteVehicle(int id) {
        if (id <= 0) {
            throw new IllegalArgumentException("O ID do veículo deve ser um valor positivo.");
        }
        return vehiclesRepository.deleteVehicle(id);
    }

}
